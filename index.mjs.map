{"version":3,"file":"index.mjs","sources":["../lib/prng.js","../lib/main.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport random from '@stdlib/random-base-arcsine';\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, y, sy, hasOptions, options ) {\n\tvar out = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tout.fcn = random.factory( x[ 0 ], y[ 0 ], options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default clbk;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nullary from '@stdlib/strided-base-nullary';\nimport binary from '@stdlib/strided-base-binary';\nimport prng from './prng.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with arcsine distributed pseudorandom numbers.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction arcsine( N, a, sa, b, sb, out, so, options ) {\n\tvar rand = prng( a, sa, b, sb, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as nullary } from '@stdlib/strided-base-nullary';\nimport { ndarray as binary } from '@stdlib/strided-base-binary';\nimport prng from './prng.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with arcsine distributed pseudorandom numbers.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {NonNegativeInteger} oa - starting `a` index\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {NonNegativeInteger} ob - starting `b` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction arcsine( N, a, sa, oa, b, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( a, sa, b, sb, arguments.length > 10, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with arcsine distributed pseudorandom numbers.\n*\n* @module @stdlib/random-strided-arcsine\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import arcsine from '@stdlib/random-strided-arcsine';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import arcsine from '@stdlib/random-strided-arcsine';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine.factory( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["clbk","x","sx","y","sy","hasOptions","options","out","arity","fcn","random","factory","arcsine","N","a","sa","b","sb","so","rand","prng","arguments","length","nullary","binary","oa","ob","oo","setReadOnly","main","ndarray"],"mappings":";;mZA8CA,SAASA,EAAMC,EAAGC,EAAIC,EAAGC,EAAIC,EAAYC,GACxC,IAAIC,EAAM,CACTC,MAAS,EACTC,IAAO,MAER,GAAKJ,EAAa,CACjB,GAAY,IAAPH,GAAmB,IAAPE,EAEhB,OADAG,EAAIE,IAAMC,EAAOC,QAASV,EAAG,GAAKE,EAAG,GAAKG,GACnCC,EAERA,EAAIE,IAAMC,EAAOC,QAASL,EAC5B,MACEC,EAAIE,IAAMC,EAGX,OADAH,EAAIC,OAAS,EACND,CACR,CCJA,SAASK,EAASC,EAAGC,EAAGC,EAAIC,EAAGC,EAAIV,EAAKW,EAAIZ,GAC3C,IAAIa,EAAOC,EAAMN,EAAGC,EAAIC,EAAGC,EAAII,UAAUC,OAAS,EAAGhB,GACrD,OAAoB,IAAfa,EAAKX,OACTe,EAAS,CAAEhB,GAAO,CAAEM,GAAK,CAAEK,GAAMC,EAAKV,KAC/BF,IAERiB,EAAQ,CAAEV,EAAGE,EAAGT,GAAO,CAAEM,GAAK,CAAEE,EAAIE,EAAIC,GAAMC,EAAKV,KAC5CF,EACR,CCLA,SAASK,EAASC,EAAGC,EAAGC,EAAIU,EAAIT,EAAGC,EAAIS,EAAInB,EAAKW,EAAIS,EAAIrB,GACvD,IAAIa,EAAOC,EAAMN,EAAGC,EAAIC,EAAGC,EAAII,UAAUC,OAAS,GAAIhB,GACtD,OAAoB,IAAfa,EAAKX,OACTe,EAAS,CAAEhB,GAAO,CAAEM,GAAK,CAAEK,GAAM,CAAES,GAAMR,EAAKV,KACvCF,IAERiB,EAAQ,CAAEV,EAAGE,EAAGT,GAAO,CAAEM,GAAK,CAAEE,EAAIE,EAAIC,GAAM,CAAEO,EAAIC,EAAIC,GAAMR,EAAKV,KAC5DF,EACR,CCdAqB,EAAAC,EAAA,UAAAC"}