{"version":3,"file":"index.mjs","sources":["../lib/prng.js","../lib/main.js","../lib/ndarray.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAccessorArray from '@stdlib/array-base-assert-is-accessor-array';\nimport random from '@stdlib/random-base-arcsine';\n\n\n// MAIN //\n\n/**\n* Returns a function for generating pseudorandom numbers.\n*\n* ## Notes\n*\n* -   The returned object has the following properties:\n*\n*     -   **arity**: number of function parameters.\n*     -   **fcn**: function for generating pseudorandom numbers.\n*\n* @private\n* @param {Collection} x - first parameter\n* @param {integer} sx - `x` stride length\n* @param {NonNegativeInteger} ox - starting `x` index\n* @param {Collection} y - second parameter\n* @param {integer} sy - `y` stride length\n* @param {NonNegativeInteger} oy - starting `y` index\n* @param {boolean} hasOptions - boolean indicating whether to process an options argument\n* @param {(void|Options)} options - function options\n* @returns {Object} function object\n*/\nfunction clbk( x, sx, ox, y, sy, oy, hasOptions, options ) {\n\tvar out;\n\tvar v1;\n\tvar v2;\n\n\tout = {\n\t\t'arity': 0,\n\t\t'fcn': null\n\t};\n\tif ( hasOptions ) {\n\t\tif ( sx === 0 && sy === 0 ) {\n\t\t\tif ( isAccessorArray( x ) ) {\n\t\t\t\tv1 = x.get( ox );\n\t\t\t} else {\n\t\t\t\tv1 = x[ ox ];\n\t\t\t}\n\t\t\tif ( isAccessorArray( y ) ) {\n\t\t\t\tv2 = y.get( oy );\n\t\t\t} else {\n\t\t\t\tv2 = y[ oy ];\n\t\t\t}\n\t\t\tout.fcn = random.factory( v1, v2, options );\n\t\t\treturn out;\n\t\t}\n\t\tout.fcn = random.factory( options );\n\t} else {\n\t\tout.fcn = random;\n\t}\n\tout.arity += 2;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default clbk;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport nullary from '@stdlib/strided-base-nullary';\nimport binary from '@stdlib/strided-base-binary';\nimport prng from './prng.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*/\nfunction arcsine( N, a, sa, b, sb, out, so, options ) {\n\tvar rand = prng( a, sa, 0, b, sb, 0, arguments.length > 7, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as nullary } from '@stdlib/strided-base-nullary';\nimport { ndarray as binary } from '@stdlib/strided-base-binary';\nimport prng from './prng.js';\n\n\n// MAIN //\n\n/**\n* Fills a strided array with pseudorandom numbers drawn from an arcsine distribution.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} a - minimum support\n* @param {integer} sa - `a` stride length\n* @param {NonNegativeInteger} oa - starting `a` index\n* @param {Collection} b - maximum support\n* @param {integer} sb - `b` stride length\n* @param {NonNegativeInteger} ob - starting `b` index\n* @param {Collection} out - output array\n* @param {integer} so - `out` stride length\n* @param {NonNegativeInteger} oo - starting `out` index\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {Error} minimum support must be less than maximum support\n* @throws {Error} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\nfunction arcsine( N, a, sa, oa, b, sb, ob, out, so, oo, options ) { // eslint-disable-line max-params\n\tvar rand = prng( a, sa, oa, b, sb, ob, arguments.length > 10, options );\n\tif ( rand.arity === 0 ) {\n\t\tnullary( [ out ], [ N ], [ so ], [ oo ], rand.fcn );\n\t\treturn out;\n\t}\n\tbinary( [ a, b, out ], [ N ], [ sa, sb, so ], [ oa, ob, oo ], rand.fcn );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arcsine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with pseudorandom numbers drawn from an arcsine distribution.\n*\n* @module @stdlib/random-strided-arcsine\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import arcsine from '@stdlib/random-strided-arcsine';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine( out.length, [ 2.0 ], 0, [ 5.0 ], 0, out, 1 );\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import arcsine from '@stdlib/random-strided-arcsine';\n*\n* // Create an array:\n* var out = new Float64Array( 10 );\n*\n* // Fill the array with pseudorandom numbers:\n* arcsine.factory( out.length, [ 2.0 ], 0, 0, [ 5.0 ], 0, 0, out, 1, 0 );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],"names":["clbk","x","sx","ox","y","sy","oy","hasOptions","options","out","v1","v2","arity","fcn","isAccessorArray","get","random","factory","arcsine","N","a","sa","b","sb","so","rand","prng","arguments","length","nullary","binary","oa","ob","oo","setReadOnly","main","ndarray"],"mappings":";;igBAiDA,SAASA,EAAMC,EAAGC,EAAIC,EAAIC,EAAGC,EAAIC,EAAIC,EAAYC,GAChD,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAM,CACLG,MAAS,EACTC,IAAO,MAEHN,EAAa,CACjB,GAAY,IAAPL,GAAmB,IAAPG,EAYhB,OAVCK,EADII,EAAiBb,GAChBA,EAAEc,IAAKZ,GAEPF,EAAGE,GAGRQ,EADIG,EAAiBV,GAChBA,EAAEW,IAAKT,GAEPF,EAAGE,GAETG,EAAII,IAAMG,EAAOC,QAASP,EAAIC,EAAIH,GAC3BC,EAERA,EAAII,IAAMG,EAAOC,QAAST,EAC5B,MACEC,EAAII,IAAMG,EAGX,OADAP,EAAIG,OAAS,EACNH,CACR,CCrBA,SAASS,EAASC,EAAGC,EAAGC,EAAIC,EAAGC,EAAId,EAAKe,EAAIhB,GAC3C,IAAIiB,EAAOC,EAAMN,EAAGC,EAAI,EAAGC,EAAGC,EAAI,EAAGI,UAAUC,OAAS,EAAGpB,GAC3D,OAAoB,IAAfiB,EAAKb,OACTiB,EAAS,CAAEpB,GAAO,CAAEU,GAAK,CAAEK,GAAMC,EAAKZ,KAC/BJ,IAERqB,EAAQ,CAAEV,EAAGE,EAAGb,GAAO,CAAEU,GAAK,CAAEE,EAAIE,EAAIC,GAAMC,EAAKZ,KAC5CJ,EACR,CCLA,SAASS,EAASC,EAAGC,EAAGC,EAAIU,EAAIT,EAAGC,EAAIS,EAAIvB,EAAKe,EAAIS,EAAIzB,GACvD,IAAIiB,EAAOC,EAAMN,EAAGC,EAAIU,EAAIT,EAAGC,EAAIS,EAAIL,UAAUC,OAAS,GAAIpB,GAC9D,OAAoB,IAAfiB,EAAKb,OACTiB,EAAS,CAAEpB,GAAO,CAAEU,GAAK,CAAEK,GAAM,CAAES,GAAMR,EAAKZ,KACvCJ,IAERqB,EAAQ,CAAEV,EAAGE,EAAGb,GAAO,CAAEU,GAAK,CAAEE,EAAIE,EAAIC,GAAM,CAAEO,EAAIC,EAAIC,GAAMR,EAAKZ,KAC5DJ,EACR,CCdAyB,EAAAC,EAAA,UAAAC"}